SHELL := /bin/bash
PROJECT_NAME := $(shell grep -e "import .* as module" setup.py | cut -d' ' -f 2)
USER ?= $(shell whoami)
CACHE_DIR ?= /tmp/$(PROJECT_NAME)-cache
CURRENT_DIR := $(shell pwd)
CURRENT_UID := $(shell id -u $(USER))
DOCKER_IMAGE_NAME = $(PROJECT_NAME):latest
TIMESTAMP = $(shell date +%s)

ARTIFACT_PREFIX = /mnt/results
BUILD_NUMBER ?= $(TIMESTAMP)
BUILD_RPM_CMD = python3.5 buildsystem/build-rpm.py
BUILD_UPLOAD_PATH ?= $(CURRENT_DIR)/upload_local/$(BUILD_NUMBER)
TEST_CMD = tox -r -c /mnt/tox.ini
INVALID_VERSION_MESSAGE = ERROR: INVALID VERSION IN BUILT PACKAGE DETECTED
VERSIONS_DIFFERENT_MESSAGE = version inside module (%s) differs from generated by setup.py (%s)!
EXPECTED_VERSION_FORMAT_MESSAGE = EXPECTED VERSION FORMAT: ^\\d{1,3}.\\d{1,3}.\\d{1,3}$$

all: clean test

# sometimes you should call "sudo make clean", eg because Docker on Linux produces files with different privileges than your user has
clean:
	git clean -xdf -e .idea -e *.iml

prepare_image:
	docker build -t $(DOCKER_IMAGE_NAME) -f Dockerfile .

cachedir:
	mkdir -m 700 -p $(CACHE_DIR)

test: cachedir prepare_image
	docker run --name $(PROJECT_NAME)-test-$(TIMESTAMP) --rm -i \
		-v $(CACHE_DIR):/var/cache \
		-v $(CURRENT_DIR):/mnt \
		-w /mnt \
		$(DOCKER_IMAGE_NAME) \
		bash -c "chown -R root /var/cache \
			&& mkdir -p $(ARTIFACT_PREFIX) && cd $(ARTIFACT_PREFIX) && $(TEST_CMD) \
			&& chown -R $(CURRENT_UID) /var/cache $(ARTIFACT_PREFIX)"

build: cachedir prepare_image
	docker run --name $(PROJECT_NAME)-build-$(TIMESTAMP) --rm -i \
		-v $(CACHE_DIR):/var/cache \
		-v $(CURRENT_DIR):/mnt \
		-v $(BUILD_UPLOAD_PATH):$(BUILD_UPLOAD_PATH) \
		-e BUILD_ROOT_DIR=$(BUILD_ROOT_DIR) \
		-e BUILD_NUMBER=$(BUILD_NUMBER) \
		-e BUILD_UPLOAD_PATH=$(BUILD_UPLOAD_PATH) \
		-e BUILD_PREFIX=$(BUILD_PREFIX) \
		-e RELEASE_TAG=$(RELEASE_TAG) \
		-w /mnt \
		$(DOCKER_IMAGE_NAME) \
		bash -c "chown -R root /var/cache \
			&& $(BUILD_RPM_CMD) \
			&& chown -R $(CURRENT_UID) /var/cache /mnt $(BUILD_UPLOAD_PATH)"

publish: all
	SETUP_VERSION=`python setup.py --version | grep -Ev "^$$" | tail -n 1` && \
	MODULE_VERSION=`python -c 'import $(PROJECT_NAME) as module; print(module.__version__)' | grep -Ev "^$$" | tail -n 1` && \
	([[ "$$MODULE_VERSION" == "$$SETUP_VERSION" ]] || (printf "$(INVALID_VERSION_MESSAGE): $(VERSIONS_DIFFERENT_MESSAGE)\n" "$${MODULE_VERSION}" "$${SETUP_VERSION}" && exit 1)) && \
	([[ "$$SETUP_VERSION" =~ ^([0-9]{1,3}\.){2}[0-9]{1,3}$$ ]] || (echo -e "$(INVALID_VERSION_MESSAGE): ('$$SETUP_VERSION')\n$(EXPECTED_VERSION_FORMAT_MESSAGE)" && exit 1))
	# on the very first publish call python setup.py register -r newstler
	python setup.py sdist bdist_wheel upload -r newstler
